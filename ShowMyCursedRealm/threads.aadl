package threads
public
	with Data_Model;

	-----Data
	data Video_Stream
		properties
			Data_Model::Data_Representation => integer;
	end Video_Stream;
	
	data Window_State
		properties
			Data_Model::Data_Representation => integer;
	end Window_State;
	
	data Door_State
		properties
			Data_Model::Data_Representation => integer;
	end Door_State;
	
	data Pin
		properties
			Data_Model::Data_Representation => integer;
	end Pin;
	
	data BooleanValue
		properties
			Data_Model::Data_Representation => integer;
	end BooleanValue;
	
	data Timestamp
		properties
			Data_Model::Data_Representation => integer;
	end Timestamp;
	
	data Access_Type
		properties
			Data_Model::Data_Representation => enum;
			Data_Model::Enumerators => ("authorized", "unauthorized", "no_person_in_room");
			Data_Model::Initial_Value => ("no_person_in_room");
	end Access_Type;
	----------------------
	
	-----Subprograms
	subprogram Video_Processing_Spg
		features
			video_stream: in parameter Video_stream;
			person_on_video_detected: out parameter BooleanValue;
		properties
			source_language => (Ada95);
			source_name => "RoomController.VideoThread";
--			source_text => ("room.c");
	end Video_Processing_Spg;
	
	subprogram Window_Sensor_Spg
		features
			window_state: in parameter Window_State;
			window_opened: out parameter BooleanValue;
		properties
			source_language => (Ada95);
			source_name => "RoomController.WindowControlThread";
--			source_text => ("room.c");
	end Window_Sensor_Spg;
	
	subprogram Door_Sensor_Spg
		features
			door_state: in parameter Door_State;
			door_opened: out parameter BooleanValue;
		properties
			source_language => (Ada95);
			source_name => "RoomController.DoorControlThread";
--			source_text => ("room.c");
	end Door_Sensor_Spg;
	
	subprogram Movement_Sensor_Spg
		features
			movement_data: in parameter BooleanValue;
			person_in_room: out parameter BooleanValue;
		properties
			source_language => (Ada95);
			source_name => "RoomController.MovementControlThread";
--			source_text => ("room.c");
	end Movement_Sensor_Spg;
	
	subprogram Pin_Device_Spg
		features
			entered_pin: in parameter Pin;
			is_pin_correct: out parameter BooleanValue;
			
		properties
			source_language => (Ada95);
			source_name => "RoomController.PinControlThread";
--			source_text => ("room.c");
	end Pin_Device_Spg;

	
	subprogram Alarm_Spg
		properties
			source_language => (Ada95);
			source_name => "RoomController.AlarmControlThread";
--			source_text => ("room.c");
	end Alarm_Spg;

	subprogram Access_Control_Spg
		-- dostaje informacje o stanie w pokoju
		-- przechowuje wewnętrzny stan
		-- na podstawie tych danych zwraca informację o tym, czy dostęp jest zautoryzowany czy nie.
		features
			is_pin_correct: in parameter BooleanValue;
			person_on_video_detected: in parameter BooleanValue;
			person_entered: in parameter BooleanValue;
			access_type: out parameter Access_Type;
		properties
			source_language => (Ada95);
			source_name => "RoomController.AccessControlThread";
--			source_text => ("room.c");
	end Access_Control_Spg;
	
	
	
	subprogram Alarm_Control_Spg
		-- decyduje o tym, czy potrzeba włączać alarm
		features
			access_type: in parameter Access_Type;
			turn_on_alarm: out parameter BooleanValue;
		properties
			source_language => (C);
			source_name => "RoomController.AlarmControlThread";
--			source_text => ("room.c");
	end Alarm_Control_Spg;
	-------------------


	-----Threads
  	thread video_thread
		features
			video_stream: in data port Video_Stream;
			person_on_video_detected: out data port BooleanValue;
	end video_thread;
	thread implementation video_thread.i
		calls
			Mycalls: {
				Q_Spg: subprogram Video_Processing_Spg;
			};
		connections
			c0: parameter video_stream -> Q_Spg.video_stream;
			c1: parameter Q_spg.person_on_video_detected -> person_on_video_detected; 
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 3 ms; 
			Period => 30ms;
			Deadline => 1000ms;
			Priority => 4;
			
	end video_thread.i;
	
	
	
	thread window_sensor_thread
		features
			window_state: in data port Window_State;
			window_opened: out data port BooleanValue;
	end window_sensor_thread;
	
	thread implementation window_sensor_thread.i
		calls
			Mycalls: {
				Q_Spg: subprogram Window_Sensor_Spg;
			};
		connections
			c0: parameter window_state -> Q_Spg.window_state;
			c1: parameter Q_Spg.window_opened -> window_opened;
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 3 ms; 
			Period => 30ms;
			Deadline => 1000ms;
			Priority => 8;
			  
	end window_sensor_thread.i;
	
	thread door_sensor_thread
		features
			door_state: in data port Door_State;
			person_entered: out data port BooleanValue;
	end door_sensor_thread;
	thread implementation door_sensor_thread.i
		calls
			Mycalls: {
				Q_Spg: subprogram Door_Sensor_Spg;
			};
		connections
			c0: parameter door_state -> Q_Spg.door_state;
			c1: parameter Q_Spg.door_opened -> person_entered;
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 3 ms; 
			Period => 30ms;
			Deadline => 1000ms;
			Priority => 7;
			  
	end door_sensor_thread.i;
	
	
	thread pin_device_thread
		features
			entered_pin: in data port Pin;
			is_pin_correct: out data port BooleanValue;
	end pin_device_thread;
	thread implementation pin_device_thread.i
		calls
			Mycalls: {
				Q_Spg: subprogram Pin_Device_Spg;
			};
		connections
			c0: parameter entered_pin -> Q_Spg.entered_pin;
			c1: parameter Q_Spg.is_pin_correct -> is_pin_correct;
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 3 ms; 
			Period => 30ms;
			Deadline => 1000ms;
			Priority => 6;
			  
	end pin_device_thread.i;
	
		
	thread movement_sensor_thread
		features
			movement_data: in data port BooleanValue;
			person_in_room: out data port BooleanValue;
	end movement_sensor_thread;
	thread implementation movement_sensor_thread.i
		calls
			Mycalls: {
				Q_Spg: subprogram Movement_Sensor_Spg;
			};
		connections
			c0: parameter movement_data -> Q_Spg.movement_data;
			c1: parameter Q_Spg.person_in_room -> person_in_room; 
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 3 ms; 
			Period => 30ms;
			Deadline => 1000ms;  
			Priority => 5;
			
	end movement_sensor_thread.i;
	
	
	thread access_control_thread
		features
			is_pin_correct: in data port BooleanValue;
			person_on_video_detected: in data port BooleanValue;
			person_entered: in data port BooleanValue;
			access_type: out data port Access_Type;
	end access_control_thread;
	
	thread implementation access_control_thread.impl
		calls
			MyCalls: {
				Q_Spg: subprogram Access_Control_Spg;
			};
		connections
			c1: parameter is_pin_correct -> Q_Spg.is_pin_correct;
			c2: parameter person_on_video_detected -> Q_spg.person_on_video_detected;
			c3: parameter person_entered -> Q_spg.person_entered;
			c4: parameter Q_spg.access_type -> access_type;
		properties
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 3 ms; 
			Period => 30ms;
			Deadline => 1000ms;
			Priority => 10; 
	end access_control_thread.impl;
	
	
	thread alarm_control_thread
		features
			access_type: in data port Access_Type;
			turn_on_alarm: out data port BooleanValue;
	end alarm_control_thread;
	
	thread implementation alarm_control_thread.impl
	calls 
		MyCalls: {
			CheckAccess: subprogram Alarm_Control_Spg;
		};
	connections 
		c1: parameter access_type -> CheckAccess.access_type;
		c2: parameter CheckAccess.turn_on_alarm -> turn_on_alarm;
	properties
		Dispatch_Protocol => Periodic;
		Compute_Execution_Time => 3 ms .. 3 ms; 
		Period => 30ms;
		Deadline => 1000ms;
		Priority => 10; 
	end alarm_control_thread.impl;
		
		
	-------------------------
end threads;