package room
public
with threads;
with deployment;
	
	--
	
	device camera
		features
			video_stream: out data port threads::Video_Stream;
			camera_on_off: in event port;
			mem_bus: requires bus access mem_bus;
	end camera;
	device implementation camera.impl
	end camera.impl;
	
	--
	
	device movement_sensor
		features
			movement_data: out data port threads::BooleanValue;
			mem_bus: requires bus access mem_bus;
	end movement_sensor;
	device implementation movement_sensor.impl	
	end movement_sensor.impl;
	
	--
	
	device pin_lock
		features
			entered_pin: out data port threads::Pin;
			mem_bus: requires bus access mem_bus;
	end pin_lock;	
	device implementation pin_lock.impl
	end pin_lock.impl;
	
	--
	
	device door_sensor
		features
			state: out data port threads::Door_State;
			mem_bus: requires bus access mem_bus;
	end door_sensor;
	device implementation door_sensor.impl
	end door_sensor.impl;
	
	--
	
	device window_sensor
		features
			state: out data port threads::Window_State;
			mem_bus: requires bus access mem_bus;
	end window_sensor;
	device implementation window_sensor.impl
	end window_sensor.impl;
	
	  -- The bus ensures communications between the antenna and the main
	  -- process stored in memory
	
	  BUS mem_bus
	  END mem_bus;
	 
	  BUS implementation mem_bus.impl
	  	properties
	  		Deployment::Transport_API => BSD_Sockets;
	  end mem_bus.impl;
	  
	  MEMORY RAM
	  FEATURES
	    mem_bus : REQUIRES BUS ACCESS mem_bus;
	  END RAM;
	  
	 memory implementation RAM.impl
	 	
	 end RAM.impl;
	 
	  PROCESSOR cpu
	  FEATURES
	  	mem_bus : REQUIRES BUS ACCESS mem_bus;
	  PROPERTIES
	   	Scheduling_protocol => (posix_1003_highest_priority_first_protocol);
	   	Deployment::Execution_Platform => Native;
	   	Priority_Range => 1 .. 10;
	  END cpu;
	  
	  processor implementation cpu.impl
	  		subcomponents 
	  			ram: memory RAM.impl;
	  end cpu.impl;

  	
		
	process room_controller
		-- to jest jakiś software który steruje całym naszym systemem.
		-- ten software dostaje jakieś dane (in event/data port) i na podstawie 
		-- tych danych decyduje o tym, czy w pokoju jest jakaś osoba.
		-- W jaki sposób on to robi, my nie mamy żadnego pojęcia, ponieważ to nie jest zadanie AADL.
		-- Wiemy tylko to, że on to robi i wiemy jakie dane on do tego potrzbuje.

			
		features			
			person_in: out data port threads::Access_Type;
			door_state: in data port threads::Door_State;
			window_state: in data port threads::Window_State;
			movement_data: in data port threads::BooleanValue;
			video_stream: in data port threads::Video_Stream;
			camera_on: out event port;
			entered_pin: in data port threads::Pin;
	end room_controller;
	
	process implementation room_controller.impl
		subcomponents
			the_video_thread: thread threads::video_thread.i;
			the_door_sensor_thread: thread threads::door_sensor_thread.i;
			the_window_sensor_thread: thread threads::window_sensor_thread.i;
			the_pin_device_thread: thread threads::pin_device_thread.i;
			the_movement_sensor_thread: thread threads::movement_sensor_thread.i;
			the_access_control_thread: thread threads::access_control_thread.impl;
			
		connections
			c0: port video_stream -> the_video_thread.video_stream;
			c1: port window_state -> the_window_sensor_thread.window_state;
			c2: port door_state -> the_door_sensor_thread.door_state;
			c4: port entered_pin -> the_pin_device_thread.entered_pin;
			c5: port movement_data -> the_movement_sensor_thread.movement_data;
			
			c6: port the_door_sensor_thread.person_entered -> the_access_control_thread.person_entered;
			c7: port the_window_sensor_thread.window_opened -> the_access_control_thread.person_entered;
			c8: port the_movement_sensor_thread.person_in_room -> the_access_control_thread.person_entered;
			c9: port the_pin_device_thread.is_pin_correct -> the_access_control_thread.is_pin_correct;
			c10: port the_video_thread.person_on_video_detected -> the_access_control_thread.person_on_video_detected;
			
			c11: port the_access_control_thread.access_type -> person_in;
			

	end room_controller.impl;
	
	system room
		-- interfejs który opisuje to jak działa system monitoringu w naszym pokóju.  
		features
			person_in: out data port threads::Access_Type;
	end room;
	
	system implementation room.standard_room
		subcomponents -- tutaj definiujemy to jakie urządzenia znajdują się w naszym pokoju. 
		-- Nie definiujemy tego w interfejsie ponieważ nie są to dane które powinny być widoczne na zewnątrz.
			camera: device camera.impl;
			movement_sensor: device movement_sensor.impl;
			window_sensor: device window_sensor.impl;
			door_sensor: device door_sensor.impl;
			standard_room_controller: process room_controller.impl;
			pin_device: device pin_lock.impl;
			
		    cpu : PROCESSOR cpu.impl;
			mem_bus: BUS mem_bus.impl;
	
		connections
			-- tutaj pokazujemy to w jaki sposób nasze urządzenia są połączone ze sobą i jak między nimi przepływają dane
			C1: port camera.video_stream -> standard_room_controller.video_stream;
			C6: port standard_room_controller.camera_on -> camera.camera_on_off; 
			C7: port pin_device.entered_pin -> standard_room_controller.entered_pin;
			C2: port movement_sensor.movement_data -> standard_room_controller.movement_data;
			C3: port window_sensor.state -> standard_room_controller.window_state;
			C4: port door_sensor.state -> standard_room_controller.door_state;
			C5: port standard_room_controller.person_in -> person_in; -- przekierowujemy output z controllera na zewnętrzny port naszego systemu
			
			A3: bus access mem_bus <-> door_sensor.mem_bus;
			A4: bus access mem_bus <-> window_sensor.mem_bus;
			A5: bus access mem_bus <-> movement_sensor.mem_bus;
			A6: bus access mem_bus <-> pin_device.mem_bus;
			A7: bus access mem_bus <-> camera.mem_bus;
			A8: bus access mem_bus <-> cpu.mem_bus;

		properties
		
		Actual_Processor_Binding => (reference (cpu)) applies to standard_room_controller;
		Actual_Memory_Binding => (reference (cpu.ram)) applies to standard_room_controller;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C1;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C4;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C3;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C7;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C2;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C5;
		
	end room.standard_room;
	
	
	-- Część z monitorowanym obiektem
	
	device alarm
		features
			turn_on_alarm: in event port;
			mem_bus: requires bus access mem_bus;
	end alarm;
	
	device implementation alarm.impl
		
	end alarm.impl;
	
	system monitored_object
		
	end monitored_object;
	
	process monitored_object_controller
		features
			access_type: in data port threads::Access_Type;
			turn_on_alarm: out event port;
	end monitored_object_controller;
	
	process implementation monitored_object_controller.impl
		subcomponents
			the_alarm_control_thread: thread threads::alarm_control_thread.impl;
		connections
			c1: port access_type -> the_alarm_control_thread.access_type;
			c2: port the_alarm_control_thread.turn_on_alarm -> turn_on_alarm;
	end monitored_object_controller.impl;
	
	
	
	system implementation monitored_object.target_obj
		-- przykład monitorowanego systemu, który składa się z trzech pokoi, sterownika oraz alarma.
		-- system działa w taki sposób, że przekazuje dane do sterownika w przypadku jeśli do któregoś z pokoi wejdzie osoba.
		subcomponents
			room_1: system room.standard_room;
--			room_2: system room.standard_room;
--			room_3: system room.standard_room;
			global_controller: process monitored_object_controller.impl;
			alarm: device alarm.impl;
			
		    cpu : PROCESSOR cpu.impl;
			mem_bus: BUS mem_bus.impl;
		connections
			C1: port room_1.person_in -> global_controller.access_type;
--			C2: port room_2.person_in -> global_controller.access_type;
--			C3: port room_3.person_in -> global_controller.access_type;
			C4: port global_controller.turn_on_alarm -> alarm.turn_on_alarm;
			
			A7: bus access mem_bus -> alarm.mem_bus;
			A8: bus access mem_bus -> cpu.mem_bus;
		
	  properties
    	Actual_Processor_Binding => (reference (cpu)) applies to global_controller;
    	Actual_Connection_Binding => (reference(mem_bus)) applies to C1;
		Actual_Connection_Binding => (reference(mem_bus)) applies to C4;
--		Actual_Connection_Binding => (reference(mem_bus)) applies to C3;
--		Actual_Connection_Binding => (reference(mem_bus)) applies to C2;
--		Actual_Memory_Binding => (reference (ram)) applies to controller;
    	
	end monitored_object.target_obj;
	
end room;