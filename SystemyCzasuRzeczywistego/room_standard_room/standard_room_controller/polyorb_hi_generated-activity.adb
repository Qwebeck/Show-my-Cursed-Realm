--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with System;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Activity is

  --  BEGIN: Data types used by all instances of component video_thread.i

  type threads_video_thread_i_Integer_Array is
   array (threads_video_thread_i_Port_Type)
     of Standard.Integer;

  type threads_video_thread_i_Port_Kind_Array is
   array (threads_video_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_Standard_Room_Controller_threads_video_thread_i_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size);

  type threads_video_thread_i_Port_Image_Array is
   array (threads_video_thread_i_Port_Type)
     of UT_Activity_Standard_Room_Controller_threads_video_thread_i_Port_Image_Array_Component;

  type threads_video_thread_i_Address_Array is
   array (threads_video_thread_i_Port_Type)
     of System.Address;

  type threads_video_thread_i_Overflow_Protocol_Array is
   array (threads_video_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component video_thread.i

  room_the_video_thread_Port_Kinds : constant threads_video_thread_i_Port_Kind_Array :=
   (video_stream =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    person_on_video_detected =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  room_the_video_thread_Port_Images : constant threads_video_thread_i_Port_Image_Array :=
   (video_stream =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_video_thread_video_stream_K),
    person_on_video_detected =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_video_thread_person_on_video_detected_K));

  room_the_video_thread_FIFO_Sizes : constant threads_video_thread_i_Integer_Array :=
   (video_stream =>
     1,
    person_on_video_detected =>
     -1);

  room_the_video_thread_Offsets : constant threads_video_thread_i_Integer_Array :=
   (video_stream =>
     1,
    person_on_video_detected =>
     0);

  room_the_video_thread_Overflow_Protocols : constant threads_video_thread_i_Overflow_Protocol_Array :=
   (video_stream =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    person_on_video_detected =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  room_the_video_thread_Urgencies : constant threads_video_thread_i_Integer_Array :=
   (video_stream =>
     0,
    person_on_video_detected =>
     0);

  room_the_video_thread_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Standard_Room_Controller_the_video_thread_person_on_video_detected_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_video_thread_person_on_video_detected_Destinations : constant UT_Activity_Standard_Room_Controller_the_video_thread_person_on_video_detected_Destinations_Array :=
   UT_Activity_Standard_Room_Controller_the_video_thread_person_on_video_detected_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_person_on_video_detected_K);

  room_the_video_thread_N_Destinations : constant threads_video_thread_i_Integer_Array :=
   (video_stream =>
     0,
    person_on_video_detected =>
     1);

  the_video_thread_Destinations : constant threads_video_thread_i_Address_Array :=
   (video_stream =>
     System.null_Address,
    person_on_video_detected =>
     the_video_thread_person_on_video_detected_Destinations'Address);

  package room_the_video_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => threads_video_thread_i_Port_Type,
      Integer_Array => threads_video_thread_i_Integer_Array,
      Port_Kind_Array => threads_video_thread_i_Port_Kind_Array,
      Port_Image_Array => threads_video_thread_i_Port_Image_Array,
      Address_Array => threads_video_thread_i_Address_Array,
      Overflow_Protocol_Array => threads_video_thread_i_Overflow_Protocol_Array,
      Thread_Interface_Type => threads_video_thread_i_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_video_thread_K,
      Thread_Port_Kinds => room_the_video_thread_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => room_the_video_thread_Port_Images,
      Thread_Fifo_Sizes => room_the_video_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => room_the_video_thread_Offsets,
      Thread_Overflow_Protocols => room_the_video_thread_Overflow_Protocols,
      Urgencies => room_the_video_thread_Urgencies,
      Global_Data_Queue_Size => room_the_video_thread_Total_FIFO_Size,
      N_Destinations => room_the_video_thread_N_Destinations,
      Destinations => the_video_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => room_the_video_thread_Task.Next_Deadline);

  --  Periodic task : the_video_thread

  -------------------------------
  -- room_the_video_thread_Job -- 
  -------------------------------

  function room_the_video_thread_Job return PolyORB_HI.Errors.Error_Kind is
    video_stream_V : PolyORB_HI_Generated.Types.Video_Stream;
    person_on_video_detected_V : PolyORB_HI_Generated.Types.BooleanValue;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (room_the_video_thread_Interrogators.Get_Count
     (video_stream)
      /= -1)
    then
      video_stream_V :=
       room_the_video_thread_Interrogators.Get_Value
         (video_stream).video_stream_DATA;
    else
      video_stream_V :=
       PolyORB_HI_Generated.Types.Video_Stream_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.threads_Video_Processing_Spg
     (video_stream => video_stream_V,
      person_on_video_detected => person_on_video_detected_V);
    --  Set the call sequence OUT port values
    room_the_video_thread_Interrogators.Put_Value
     (threads_video_thread_i_Interface'
       (Port => person_on_video_detected,
        person_on_video_detected_DATA => person_on_video_detected_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     room_the_video_thread_Interrogators.Send_Output
       (person_on_video_detected);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end room_the_video_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  door_sensor_thread.i

  type threads_door_sensor_thread_i_Integer_Array is
   array (threads_door_sensor_thread_i_Port_Type)
     of Standard.Integer;

  type threads_door_sensor_thread_i_Port_Kind_Array is
   array (threads_door_sensor_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Standard_Room_Controller_threads_door_sensor_thread_i_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size);

  type threads_door_sensor_thread_i_Port_Image_Array is
   array (threads_door_sensor_thread_i_Port_Type)
     of UT_Activity_Standard_Room_Controller_threads_door_sensor_thread_i_Port_Image_Array_Component;

  type threads_door_sensor_thread_i_Address_Array is
   array (threads_door_sensor_thread_i_Port_Type)
     of System.Address;

  type threads_door_sensor_thread_i_Overflow_Protocol_Array is
   array (threads_door_sensor_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component door_sensor_thread.i

  room_the_door_sensor_thread_Port_Kinds : constant threads_door_sensor_thread_i_Port_Kind_Array :=
   (door_state =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    person_entered =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  room_the_door_sensor_thread_Port_Images : constant threads_door_sensor_thread_i_Port_Image_Array :=
   (door_state =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_door_sensor_thread_door_state_K),
    person_entered =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_door_sensor_thread_person_entered_K));

  room_the_door_sensor_thread_FIFO_Sizes : constant threads_door_sensor_thread_i_Integer_Array :=
   (door_state =>
     1,
    person_entered =>
     -1);

  room_the_door_sensor_thread_Offsets : constant threads_door_sensor_thread_i_Integer_Array :=
   (door_state =>
     1,
    person_entered =>
     0);

  room_the_door_sensor_thread_Overflow_Protocols : constant threads_door_sensor_thread_i_Overflow_Protocol_Array :=
   (door_state =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    person_entered =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  room_the_door_sensor_thread_Urgencies : constant threads_door_sensor_thread_i_Integer_Array :=
   (door_state =>
     0,
    person_entered =>
     0);

  room_the_door_sensor_thread_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Standard_Room_Controller_the_door_sensor_thread_person_entered_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_door_sensor_thread_person_entered_Destinations : constant UT_Activity_Standard_Room_Controller_the_door_sensor_thread_person_entered_Destinations_Array :=
   UT_Activity_Standard_Room_Controller_the_door_sensor_thread_person_entered_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_person_entered_K);

  room_the_door_sensor_thread_N_Destinations : constant threads_door_sensor_thread_i_Integer_Array :=
   (door_state =>
     0,
    person_entered =>
     1);

  the_door_sensor_thread_Destinations : constant threads_door_sensor_thread_i_Address_Array :=
   (door_state =>
     System.null_Address,
    person_entered =>
     the_door_sensor_thread_person_entered_Destinations'Address);

  package room_the_door_sensor_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => threads_door_sensor_thread_i_Port_Type,
      Integer_Array => threads_door_sensor_thread_i_Integer_Array,
      Port_Kind_Array => threads_door_sensor_thread_i_Port_Kind_Array,
      Port_Image_Array => threads_door_sensor_thread_i_Port_Image_Array,
      Address_Array => threads_door_sensor_thread_i_Address_Array,
      Overflow_Protocol_Array => threads_door_sensor_thread_i_Overflow_Protocol_Array,
      Thread_Interface_Type => threads_door_sensor_thread_i_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_door_sensor_thread_K,
      Thread_Port_Kinds => room_the_door_sensor_thread_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => room_the_door_sensor_thread_Port_Images,
      Thread_Fifo_Sizes => room_the_door_sensor_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => room_the_door_sensor_thread_Offsets,
      Thread_Overflow_Protocols => room_the_door_sensor_thread_Overflow_Protocols,
      Urgencies => room_the_door_sensor_thread_Urgencies,
      Global_Data_Queue_Size => room_the_door_sensor_thread_Total_FIFO_Size,
      N_Destinations => room_the_door_sensor_thread_N_Destinations,
      Destinations => the_door_sensor_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => room_the_door_sensor_thread_Task.Next_Deadline);

  --  Periodic task : the_door_sensor_thread

  -------------------------------------
  -- room_the_door_sensor_thread_Job -- 
  -------------------------------------

  function room_the_door_sensor_thread_Job return PolyORB_HI.Errors.Error_Kind is
    door_state_V : PolyORB_HI_Generated.Types.Door_State;
    person_entered_V : PolyORB_HI_Generated.Types.BooleanValue;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (room_the_door_sensor_thread_Interrogators.Get_Count
     (door_state)
      /= -1)
    then
      door_state_V :=
       room_the_door_sensor_thread_Interrogators.Get_Value
         (door_state).door_state_DATA;
    else
      door_state_V :=
       PolyORB_HI_Generated.Types.Door_State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.threads_Door_Sensor_Spg
     (door_state => door_state_V,
      door_opened => person_entered_V);
    --  Set the call sequence OUT port values
    room_the_door_sensor_thread_Interrogators.Put_Value
     (threads_door_sensor_thread_i_Interface'
       (Port => person_entered,
        person_entered_DATA => person_entered_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     room_the_door_sensor_thread_Interrogators.Send_Output
       (person_entered);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end room_the_door_sensor_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  window_sensor_thread.i

  type threads_window_sensor_thread_i_Integer_Array is
   array (threads_window_sensor_thread_i_Port_Type)
     of Standard.Integer;

  type threads_window_sensor_thread_i_Port_Kind_Array is
   array (threads_window_sensor_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Standard_Room_Controller_threads_window_sensor_thread_i_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size);

  type threads_window_sensor_thread_i_Port_Image_Array is
   array (threads_window_sensor_thread_i_Port_Type)
     of UT_Activity_Standard_Room_Controller_threads_window_sensor_thread_i_Port_Image_Array_Component;

  type threads_window_sensor_thread_i_Address_Array is
   array (threads_window_sensor_thread_i_Port_Type)
     of System.Address;

  type threads_window_sensor_thread_i_Overflow_Protocol_Array is
   array (threads_window_sensor_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  window_sensor_thread.i

  room_the_window_sensor_thread_Port_Kinds : constant threads_window_sensor_thread_i_Port_Kind_Array :=
   (window_state =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    window_opened =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  room_the_window_sensor_thread_Port_Images : constant threads_window_sensor_thread_i_Port_Image_Array :=
   (window_state =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_window_sensor_thread_window_state_K),
    window_opened =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_window_sensor_thread_window_opened_K));

  room_the_window_sensor_thread_FIFO_Sizes : constant threads_window_sensor_thread_i_Integer_Array :=
   (window_state =>
     1,
    window_opened =>
     -1);

  room_the_window_sensor_thread_Offsets : constant threads_window_sensor_thread_i_Integer_Array :=
   (window_state =>
     1,
    window_opened =>
     0);

  room_the_window_sensor_thread_Overflow_Protocols : constant threads_window_sensor_thread_i_Overflow_Protocol_Array :=
   (window_state =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    window_opened =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  room_the_window_sensor_thread_Urgencies : constant threads_window_sensor_thread_i_Integer_Array :=
   (window_state =>
     0,
    window_opened =>
     0);

  room_the_window_sensor_thread_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Standard_Room_Controller_the_window_sensor_thread_window_opened_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_window_sensor_thread_window_opened_Destinations : constant UT_Activity_Standard_Room_Controller_the_window_sensor_thread_window_opened_Destinations_Array :=
   UT_Activity_Standard_Room_Controller_the_window_sensor_thread_window_opened_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_person_entered_K);

  room_the_window_sensor_thread_N_Destinations : constant threads_window_sensor_thread_i_Integer_Array :=
   (window_state =>
     0,
    window_opened =>
     1);

  the_window_sensor_thread_Destinations : constant threads_window_sensor_thread_i_Address_Array :=
   (window_state =>
     System.null_Address,
    window_opened =>
     the_window_sensor_thread_window_opened_Destinations'Address);

  package room_the_window_sensor_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => threads_window_sensor_thread_i_Port_Type,
      Integer_Array => threads_window_sensor_thread_i_Integer_Array,
      Port_Kind_Array => threads_window_sensor_thread_i_Port_Kind_Array,
      Port_Image_Array => threads_window_sensor_thread_i_Port_Image_Array,
      Address_Array => threads_window_sensor_thread_i_Address_Array,
      Overflow_Protocol_Array => threads_window_sensor_thread_i_Overflow_Protocol_Array,
      Thread_Interface_Type => threads_window_sensor_thread_i_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_window_sensor_thread_K,
      Thread_Port_Kinds => room_the_window_sensor_thread_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => room_the_window_sensor_thread_Port_Images,
      Thread_Fifo_Sizes => room_the_window_sensor_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => room_the_window_sensor_thread_Offsets,
      Thread_Overflow_Protocols => room_the_window_sensor_thread_Overflow_Protocols,
      Urgencies => room_the_window_sensor_thread_Urgencies,
      Global_Data_Queue_Size => room_the_window_sensor_thread_Total_FIFO_Size,
      N_Destinations => room_the_window_sensor_thread_N_Destinations,
      Destinations => the_window_sensor_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => room_the_window_sensor_thread_Task.Next_Deadline);

  --  Periodic task : the_window_sensor_thread

  ---------------------------------------
  -- room_the_window_sensor_thread_Job -- 
  ---------------------------------------

  function room_the_window_sensor_thread_Job return PolyORB_HI.Errors.Error_Kind is
    window_state_V : PolyORB_HI_Generated.Types.Window_State;
    window_opened_V : PolyORB_HI_Generated.Types.BooleanValue;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (room_the_window_sensor_thread_Interrogators.Get_Count
     (window_state)
      /= -1)
    then
      window_state_V :=
       room_the_window_sensor_thread_Interrogators.Get_Value
         (window_state).window_state_DATA;
    else
      window_state_V :=
       PolyORB_HI_Generated.Types.Window_State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.threads_Window_Sensor_Spg
     (window_state => window_state_V,
      window_opened => window_opened_V);
    --  Set the call sequence OUT port values
    room_the_window_sensor_thread_Interrogators.Put_Value
     (threads_window_sensor_thread_i_Interface'
       (Port => window_opened,
        window_opened_DATA => window_opened_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     room_the_window_sensor_thread_Interrogators.Send_Output
       (window_opened);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end room_the_window_sensor_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  pin_device_thread.i

  type threads_pin_device_thread_i_Integer_Array is
   array (threads_pin_device_thread_i_Port_Type)
     of Standard.Integer;

  type threads_pin_device_thread_i_Port_Kind_Array is
   array (threads_pin_device_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Standard_Room_Controller_threads_pin_device_thread_i_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size);

  type threads_pin_device_thread_i_Port_Image_Array is
   array (threads_pin_device_thread_i_Port_Type)
     of UT_Activity_Standard_Room_Controller_threads_pin_device_thread_i_Port_Image_Array_Component;

  type threads_pin_device_thread_i_Address_Array is
   array (threads_pin_device_thread_i_Port_Type)
     of System.Address;

  type threads_pin_device_thread_i_Overflow_Protocol_Array is
   array (threads_pin_device_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component pin_device_thread.i

  room_the_pin_device_thread_Port_Kinds : constant threads_pin_device_thread_i_Port_Kind_Array :=
   (entered_pin =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    is_pin_correct =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  room_the_pin_device_thread_Port_Images : constant threads_pin_device_thread_i_Port_Image_Array :=
   (entered_pin =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_pin_device_thread_entered_pin_K),
    is_pin_correct =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_pin_device_thread_is_pin_correct_K));

  room_the_pin_device_thread_FIFO_Sizes : constant threads_pin_device_thread_i_Integer_Array :=
   (entered_pin =>
     1,
    is_pin_correct =>
     -1);

  room_the_pin_device_thread_Offsets : constant threads_pin_device_thread_i_Integer_Array :=
   (entered_pin =>
     1,
    is_pin_correct =>
     0);

  room_the_pin_device_thread_Overflow_Protocols : constant threads_pin_device_thread_i_Overflow_Protocol_Array :=
   (entered_pin =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    is_pin_correct =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  room_the_pin_device_thread_Urgencies : constant threads_pin_device_thread_i_Integer_Array :=
   (entered_pin =>
     0,
    is_pin_correct =>
     0);

  room_the_pin_device_thread_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Standard_Room_Controller_the_pin_device_thread_is_pin_correct_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_pin_device_thread_is_pin_correct_Destinations : constant UT_Activity_Standard_Room_Controller_the_pin_device_thread_is_pin_correct_Destinations_Array :=
   UT_Activity_Standard_Room_Controller_the_pin_device_thread_is_pin_correct_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_is_pin_correct_K);

  room_the_pin_device_thread_N_Destinations : constant threads_pin_device_thread_i_Integer_Array :=
   (entered_pin =>
     0,
    is_pin_correct =>
     1);

  the_pin_device_thread_Destinations : constant threads_pin_device_thread_i_Address_Array :=
   (entered_pin =>
     System.null_Address,
    is_pin_correct =>
     the_pin_device_thread_is_pin_correct_Destinations'Address);

  package room_the_pin_device_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => threads_pin_device_thread_i_Port_Type,
      Integer_Array => threads_pin_device_thread_i_Integer_Array,
      Port_Kind_Array => threads_pin_device_thread_i_Port_Kind_Array,
      Port_Image_Array => threads_pin_device_thread_i_Port_Image_Array,
      Address_Array => threads_pin_device_thread_i_Address_Array,
      Overflow_Protocol_Array => threads_pin_device_thread_i_Overflow_Protocol_Array,
      Thread_Interface_Type => threads_pin_device_thread_i_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_pin_device_thread_K,
      Thread_Port_Kinds => room_the_pin_device_thread_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => room_the_pin_device_thread_Port_Images,
      Thread_Fifo_Sizes => room_the_pin_device_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => room_the_pin_device_thread_Offsets,
      Thread_Overflow_Protocols => room_the_pin_device_thread_Overflow_Protocols,
      Urgencies => room_the_pin_device_thread_Urgencies,
      Global_Data_Queue_Size => room_the_pin_device_thread_Total_FIFO_Size,
      N_Destinations => room_the_pin_device_thread_N_Destinations,
      Destinations => the_pin_device_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => room_the_pin_device_thread_Task.Next_Deadline);

  --  Periodic task : the_pin_device_thread

  ------------------------------------
  -- room_the_pin_device_thread_Job -- 
  ------------------------------------

  function room_the_pin_device_thread_Job return PolyORB_HI.Errors.Error_Kind is
    entered_pin_V : PolyORB_HI_Generated.Types.Pin;
    is_pin_correct_V : PolyORB_HI_Generated.Types.BooleanValue;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (room_the_pin_device_thread_Interrogators.Get_Count
     (entered_pin)
      /= -1)
    then
      entered_pin_V :=
       room_the_pin_device_thread_Interrogators.Get_Value
         (entered_pin).entered_pin_DATA;
    else
      entered_pin_V :=
       PolyORB_HI_Generated.Types.Pin_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.threads_Pin_Device_Spg
     (entered_pin => entered_pin_V,
      is_pin_correct => is_pin_correct_V);
    --  Set the call sequence OUT port values
    room_the_pin_device_thread_Interrogators.Put_Value
     (threads_pin_device_thread_i_Interface'
       (Port => is_pin_correct,
        is_pin_correct_DATA => is_pin_correct_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     room_the_pin_device_thread_Interrogators.Send_Output
       (is_pin_correct);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end room_the_pin_device_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  movement_sensor_thread.i

  type threads_movement_sensor_thread_i_Integer_Array is
   array (threads_movement_sensor_thread_i_Port_Type)
     of Standard.Integer;

  type threads_movement_sensor_thread_i_Port_Kind_Array is
   array (threads_movement_sensor_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Standard_Room_Controller_threads_movement_sensor_thread_i_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size);

  type threads_movement_sensor_thread_i_Port_Image_Array is
   array (threads_movement_sensor_thread_i_Port_Type)
     of UT_Activity_Standard_Room_Controller_threads_movement_sensor_thread_i_Port_Image_Array_Component;

  type threads_movement_sensor_thread_i_Address_Array is
   array (threads_movement_sensor_thread_i_Port_Type)
     of System.Address;

  type threads_movement_sensor_thread_i_Overflow_Protocol_Array is
   array (threads_movement_sensor_thread_i_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  movement_sensor_thread.i

  room_the_movement_sensor_thread_Port_Kinds : constant threads_movement_sensor_thread_i_Port_Kind_Array :=
   (movement_data =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    person_in_room =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  room_the_movement_sensor_thread_Port_Images : constant threads_movement_sensor_thread_i_Port_Image_Array :=
   (movement_data =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_movement_sensor_thread_movement_data_K),
    person_in_room =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_movement_sensor_thread_person_in_room_K));

  room_the_movement_sensor_thread_FIFO_Sizes : constant threads_movement_sensor_thread_i_Integer_Array :=
   (movement_data =>
     1,
    person_in_room =>
     -1);

  room_the_movement_sensor_thread_Offsets : constant threads_movement_sensor_thread_i_Integer_Array :=
   (movement_data =>
     1,
    person_in_room =>
     0);

  room_the_movement_sensor_thread_Overflow_Protocols : constant threads_movement_sensor_thread_i_Overflow_Protocol_Array :=
   (movement_data =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    person_in_room =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  room_the_movement_sensor_thread_Urgencies : constant threads_movement_sensor_thread_i_Integer_Array :=
   (movement_data =>
     0,
    person_in_room =>
     0);

  room_the_movement_sensor_thread_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Standard_Room_Controller_the_movement_sensor_thread_person_in_room_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_movement_sensor_thread_person_in_room_Destinations : constant UT_Activity_Standard_Room_Controller_the_movement_sensor_thread_person_in_room_Destinations_Array :=
   UT_Activity_Standard_Room_Controller_the_movement_sensor_thread_person_in_room_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_person_entered_K);

  room_the_movement_sensor_thread_N_Destinations : constant threads_movement_sensor_thread_i_Integer_Array :=
   (movement_data =>
     0,
    person_in_room =>
     1);

  the_movement_sensor_thread_Destinations : constant threads_movement_sensor_thread_i_Address_Array :=
   (movement_data =>
     System.null_Address,
    person_in_room =>
     the_movement_sensor_thread_person_in_room_Destinations'Address);

  package room_the_movement_sensor_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => threads_movement_sensor_thread_i_Port_Type,
      Integer_Array => threads_movement_sensor_thread_i_Integer_Array,
      Port_Kind_Array => threads_movement_sensor_thread_i_Port_Kind_Array,
      Port_Image_Array => threads_movement_sensor_thread_i_Port_Image_Array,
      Address_Array => threads_movement_sensor_thread_i_Address_Array,
      Overflow_Protocol_Array => threads_movement_sensor_thread_i_Overflow_Protocol_Array,
      Thread_Interface_Type => threads_movement_sensor_thread_i_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_movement_sensor_thread_K,
      Thread_Port_Kinds => room_the_movement_sensor_thread_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => room_the_movement_sensor_thread_Port_Images,
      Thread_Fifo_Sizes => room_the_movement_sensor_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => room_the_movement_sensor_thread_Offsets,
      Thread_Overflow_Protocols => room_the_movement_sensor_thread_Overflow_Protocols,
      Urgencies => room_the_movement_sensor_thread_Urgencies,
      Global_Data_Queue_Size => room_the_movement_sensor_thread_Total_FIFO_Size,
      N_Destinations => room_the_movement_sensor_thread_N_Destinations,
      Destinations => the_movement_sensor_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => room_the_movement_sensor_thread_Task.Next_Deadline);

  --  Periodic task : the_movement_sensor_thread

  -----------------------------------------
  -- room_the_movement_sensor_thread_Job -- 
  -----------------------------------------

  function room_the_movement_sensor_thread_Job return PolyORB_HI.Errors.Error_Kind is
    movement_data_V : PolyORB_HI_Generated.Types.BooleanValue;
    person_in_room_V : PolyORB_HI_Generated.Types.BooleanValue;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (room_the_movement_sensor_thread_Interrogators.Get_Count
     (movement_data)
      /= -1)
    then
      movement_data_V :=
       room_the_movement_sensor_thread_Interrogators.Get_Value
         (movement_data).movement_data_DATA;
    else
      movement_data_V :=
       PolyORB_HI_Generated.Types.BooleanValue_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.threads_Movement_Sensor_Spg
     (movement_data => movement_data_V,
      person_in_room => person_in_room_V);
    --  Set the call sequence OUT port values
    room_the_movement_sensor_thread_Interrogators.Put_Value
     (threads_movement_sensor_thread_i_Interface'
       (Port => person_in_room,
        person_in_room_DATA => person_in_room_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     room_the_movement_sensor_thread_Interrogators.Send_Output
       (person_in_room);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end room_the_movement_sensor_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  access_control_thread.impl

  type threads_access_control_thread_impl_Integer_Array is
   array (threads_access_control_thread_impl_Port_Type)
     of Standard.Integer;

  type threads_access_control_thread_impl_Port_Kind_Array is
   array (threads_access_control_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Standard_Room_Controller_threads_access_control_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Standard_Room_Controller_1_Max_Port_Image_Size);

  type threads_access_control_thread_impl_Port_Image_Array is
   array (threads_access_control_thread_impl_Port_Type)
     of UT_Activity_Standard_Room_Controller_threads_access_control_thread_impl_Port_Image_Array_Component;

  type threads_access_control_thread_impl_Address_Array is
   array (threads_access_control_thread_impl_Port_Type)
     of System.Address;

  type threads_access_control_thread_impl_Overflow_Protocol_Array is
   array (threads_access_control_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  access_control_thread.impl

  room_the_access_control_thread_Port_Kinds : constant threads_access_control_thread_impl_Port_Kind_Array :=
   (is_pin_correct =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    person_on_video_detected =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    person_entered =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    access_type =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  room_the_access_control_thread_Port_Images : constant threads_access_control_thread_impl_Port_Image_Array :=
   (is_pin_correct =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_is_pin_correct_K),
    person_on_video_detected =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_person_on_video_detected_K),
    person_entered =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_person_entered_K),
    access_type =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_access_type_K));

  room_the_access_control_thread_FIFO_Sizes : constant threads_access_control_thread_impl_Integer_Array :=
   (is_pin_correct =>
     1,
    person_on_video_detected =>
     1,
    person_entered =>
     1,
    access_type =>
     -1);

  room_the_access_control_thread_Offsets : constant threads_access_control_thread_impl_Integer_Array :=
   (is_pin_correct =>
     1,
    person_on_video_detected =>
     2,
    person_entered =>
     3,
    access_type =>
     0);

  room_the_access_control_thread_Overflow_Protocols : constant threads_access_control_thread_impl_Overflow_Protocol_Array :=
   (is_pin_correct =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    person_on_video_detected =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    person_entered =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    access_type =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  room_the_access_control_thread_Urgencies : constant threads_access_control_thread_impl_Integer_Array :=
   (is_pin_correct =>
     0,
    person_on_video_detected =>
     0,
    person_entered =>
     0,
    access_type =>
     0);

  room_the_access_control_thread_Total_FIFO_Size : constant Standard.Integer :=
   3;

  type UT_Activity_Standard_Room_Controller_the_access_control_thread_access_type_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_access_control_thread_access_type_Destinations : constant UT_Activity_Standard_Room_Controller_the_access_control_thread_access_type_Destinations_Array :=
   UT_Activity_Standard_Room_Controller_the_access_control_thread_access_type_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.global_controller_the_alarm_control_thread_access_type_K);

  room_the_access_control_thread_N_Destinations : constant threads_access_control_thread_impl_Integer_Array :=
   (is_pin_correct =>
     0,
    person_on_video_detected =>
     0,
    person_entered =>
     0,
    access_type =>
     1);

  the_access_control_thread_Destinations : constant threads_access_control_thread_impl_Address_Array :=
   (is_pin_correct =>
     System.null_Address,
    person_on_video_detected =>
     System.null_Address,
    person_entered =>
     System.null_Address,
    access_type =>
     the_access_control_thread_access_type_Destinations'Address);

  package room_the_access_control_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => threads_access_control_thread_impl_Port_Type,
      Integer_Array => threads_access_control_thread_impl_Integer_Array,
      Port_Kind_Array => threads_access_control_thread_impl_Port_Kind_Array,
      Port_Image_Array => threads_access_control_thread_impl_Port_Image_Array,
      Address_Array => threads_access_control_thread_impl_Address_Array,
      Overflow_Protocol_Array => threads_access_control_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => threads_access_control_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_K,
      Thread_Port_Kinds => room_the_access_control_thread_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => room_the_access_control_thread_Port_Images,
      Thread_Fifo_Sizes => room_the_access_control_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => room_the_access_control_thread_Offsets,
      Thread_Overflow_Protocols => room_the_access_control_thread_Overflow_Protocols,
      Urgencies => room_the_access_control_thread_Urgencies,
      Global_Data_Queue_Size => room_the_access_control_thread_Total_FIFO_Size,
      N_Destinations => room_the_access_control_thread_N_Destinations,
      Destinations => the_access_control_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => room_the_access_control_thread_Task.Next_Deadline);

  --  Periodic task : the_access_control_thread

  ----------------------------------------
  -- room_the_access_control_thread_Job -- 
  ----------------------------------------

  function room_the_access_control_thread_Job return PolyORB_HI.Errors.Error_Kind is
    is_pin_correct_V : PolyORB_HI_Generated.Types.BooleanValue;
    person_on_video_detected_V : PolyORB_HI_Generated.Types.BooleanValue;
    person_entered_V : PolyORB_HI_Generated.Types.BooleanValue;
    access_type_V : PolyORB_HI_Generated.Types.Access_Type;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (room_the_access_control_thread_Interrogators.Get_Count
     (is_pin_correct)
      /= -1)
    then
      is_pin_correct_V :=
       room_the_access_control_thread_Interrogators.Get_Value
         (is_pin_correct).is_pin_correct_DATA;
    else
      is_pin_correct_V :=
       PolyORB_HI_Generated.Types.BooleanValue_Default_Value;
    end if;
    if (room_the_access_control_thread_Interrogators.Get_Count
     (person_on_video_detected)
      /= -1)
    then
      person_on_video_detected_V :=
       room_the_access_control_thread_Interrogators.Get_Value
         (person_on_video_detected).person_on_video_detected_DATA;
    else
      person_on_video_detected_V :=
       PolyORB_HI_Generated.Types.BooleanValue_Default_Value;
    end if;
    if (room_the_access_control_thread_Interrogators.Get_Count
     (person_entered)
      /= -1)
    then
      person_entered_V :=
       room_the_access_control_thread_Interrogators.Get_Value
         (person_entered).person_entered_DATA;
    else
      person_entered_V :=
       PolyORB_HI_Generated.Types.BooleanValue_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.threads_Access_Control_Spg
     (is_pin_correct => is_pin_correct_V,
      person_on_video_detected => person_on_video_detected_V,
      person_entered => person_entered_V,
      access_type => access_type_V);
    --  Set the call sequence OUT port values
    room_the_access_control_thread_Interrogators.Put_Value
     (threads_access_control_thread_impl_Interface'
       (Port => access_type,
        access_type_DATA => access_type_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     room_the_access_control_thread_Interrogators.Send_Output
       (access_type);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end room_the_access_control_thread_Job;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return room_the_video_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_video_thread_i_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_video_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_video_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return threads_video_thread_i_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_video_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_video_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_video_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_video_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_video_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_video_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_video_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_video_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_video_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return room_the_door_sensor_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_door_sensor_thread_i_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_door_sensor_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_door_sensor_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return threads_door_sensor_thread_i_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_door_sensor_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_door_sensor_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_door_sensor_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_door_sensor_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_door_sensor_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_door_sensor_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_door_sensor_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_door_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_door_sensor_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return room_the_window_sensor_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_window_sensor_thread_i_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_window_sensor_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_window_sensor_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return threads_window_sensor_thread_i_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_window_sensor_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_window_sensor_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_window_sensor_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_window_sensor_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_window_sensor_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_window_sensor_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_window_sensor_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_window_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_window_sensor_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return room_the_pin_device_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_pin_device_thread_i_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_pin_device_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_pin_device_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return threads_pin_device_thread_i_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_pin_device_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_pin_device_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_pin_device_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_pin_device_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_pin_device_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_pin_device_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_pin_device_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_pin_device_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_pin_device_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return room_the_movement_sensor_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_movement_sensor_thread_i_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_movement_sensor_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_movement_sensor_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return threads_movement_sensor_thread_i_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_movement_sensor_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_movement_sensor_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_movement_sensor_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_movement_sensor_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_movement_sensor_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_movement_sensor_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_movement_sensor_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_movement_sensor_thread_i_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_movement_sensor_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return room_the_access_control_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_access_control_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_access_control_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_access_control_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return threads_access_control_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_access_control_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_access_control_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_access_control_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return room_the_access_control_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_access_control_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_access_control_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_access_control_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_access_control_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    room_the_access_control_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
