--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Types;
with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with PolyORB_HI.Periodic_Task;
pragma Elaborate_All (PolyORB_HI.Periodic_Task);

package PolyORB_HI_Generated.Activity is

  --  BEGIN: Entities used by all instances of component video_thread.i

  type threads_video_thread_i_Port_Type is
   (video_stream,
    person_on_video_detected);

  type threads_video_thread_i_Interface 
   (Port : threads_video_thread_i_Port_Type := threads_video_thread_i_Port_Type'First)
  is
    record
      case Port is
        when video_stream =>
          video_stream_DATA : PolyORB_HI_Generated.Types.Video_Stream;
        when person_on_video_detected =>
          person_on_video_detected_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_video_thread_i_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return threads_video_thread_i_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_video_thread_i_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_video_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_video_thread_i_Port_Type);

  --  END: Entities used by all instances of component video_thread.i

  --  Periodic task : the_video_thread

  function room_the_video_thread_Job return PolyORB_HI.Errors.Error_Kind;

  package room_the_video_thread_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_video_thread_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (30),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 4,
      Task_Stack_Size => 100000,
      Job => room_the_video_thread_Job);

  --  BEGIN: Entities used by all instances of component door_sensor_thread.i

  type threads_door_sensor_thread_i_Port_Type is
   (door_state,
    person_entered);

  type threads_door_sensor_thread_i_Interface 
   (Port : threads_door_sensor_thread_i_Port_Type := threads_door_sensor_thread_i_Port_Type'First)
  is
    record
      case Port is
        when door_state =>
          door_state_DATA : PolyORB_HI_Generated.Types.Door_State;
        when person_entered =>
          person_entered_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_door_sensor_thread_i_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return threads_door_sensor_thread_i_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_door_sensor_thread_i_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_door_sensor_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_door_sensor_thread_i_Port_Type);

  --  END: Entities used by all instances of component door_sensor_thread.i

  --  Periodic task : the_door_sensor_thread

  function room_the_door_sensor_thread_Job return PolyORB_HI.Errors.Error_Kind;

  package room_the_door_sensor_thread_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_door_sensor_thread_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (30),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 7,
      Task_Stack_Size => 100000,
      Job => room_the_door_sensor_thread_Job);

  --  BEGIN: Entities used by all instances of component 
  --  window_sensor_thread.i

  type threads_window_sensor_thread_i_Port_Type is
   (window_state,
    window_opened);

  type threads_window_sensor_thread_i_Interface 
   (Port : threads_window_sensor_thread_i_Port_Type := threads_window_sensor_thread_i_Port_Type'First)
  is
    record
      case Port is
        when window_state =>
          window_state_DATA : PolyORB_HI_Generated.Types.Window_State;
        when window_opened =>
          window_opened_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_window_sensor_thread_i_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return threads_window_sensor_thread_i_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_window_sensor_thread_i_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_window_sensor_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_window_sensor_thread_i_Port_Type);

  --  END: Entities used by all instances of component window_sensor_thread.i

  --  Periodic task : the_window_sensor_thread

  function room_the_window_sensor_thread_Job return PolyORB_HI.Errors.Error_Kind;

  package room_the_window_sensor_thread_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_window_sensor_thread_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (30),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 8,
      Task_Stack_Size => 100000,
      Job => room_the_window_sensor_thread_Job);

  --  BEGIN: Entities used by all instances of component pin_device_thread.i

  type threads_pin_device_thread_i_Port_Type is
   (entered_pin,
    is_pin_correct);

  type threads_pin_device_thread_i_Interface 
   (Port : threads_pin_device_thread_i_Port_Type := threads_pin_device_thread_i_Port_Type'First)
  is
    record
      case Port is
        when entered_pin =>
          entered_pin_DATA : PolyORB_HI_Generated.Types.Pin;
        when is_pin_correct =>
          is_pin_correct_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_pin_device_thread_i_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return threads_pin_device_thread_i_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_pin_device_thread_i_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_pin_device_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_pin_device_thread_i_Port_Type);

  --  END: Entities used by all instances of component pin_device_thread.i

  --  Periodic task : the_pin_device_thread

  function room_the_pin_device_thread_Job return PolyORB_HI.Errors.Error_Kind;

  package room_the_pin_device_thread_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_pin_device_thread_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (30),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 6,
      Task_Stack_Size => 100000,
      Job => room_the_pin_device_thread_Job);

  --  BEGIN: Entities used by all instances of component 
  --  movement_sensor_thread.i

  type threads_movement_sensor_thread_i_Port_Type is
   (movement_data,
    person_in_room);

  type threads_movement_sensor_thread_i_Interface 
   (Port : threads_movement_sensor_thread_i_Port_Type := threads_movement_sensor_thread_i_Port_Type'First)
  is
    record
      case Port is
        when movement_data =>
          movement_data_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        when person_in_room =>
          person_in_room_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_movement_sensor_thread_i_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return threads_movement_sensor_thread_i_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_movement_sensor_thread_i_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_movement_sensor_thread_i_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_movement_sensor_thread_i_Port_Type);

  --  END: Entities used by all instances of component 
  --  movement_sensor_thread.i

  --  Periodic task : the_movement_sensor_thread

  function room_the_movement_sensor_thread_Job return PolyORB_HI.Errors.Error_Kind;

  package room_the_movement_sensor_thread_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_movement_sensor_thread_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (30),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 5,
      Task_Stack_Size => 100000,
      Job => room_the_movement_sensor_thread_Job);

  --  BEGIN: Entities used by all instances of component 
  --  access_control_thread.impl

  type threads_access_control_thread_impl_Port_Type is
   (is_pin_correct,
    person_on_video_detected,
    person_entered,
    access_type);

  type threads_access_control_thread_impl_Interface 
   (Port : threads_access_control_thread_impl_Port_Type := threads_access_control_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when is_pin_correct =>
          is_pin_correct_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        when person_on_video_detected =>
          person_on_video_detected_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        when person_entered =>
          person_entered_DATA : PolyORB_HI_Generated.Types.BooleanValue;
        when access_type =>
          access_type_DATA : PolyORB_HI_Generated.Types.Access_Type;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_access_control_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return threads_access_control_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : threads_access_control_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : threads_access_control_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out threads_access_control_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  access_control_thread.impl

  --  Periodic task : the_access_control_thread

  function room_the_access_control_thread_Job return PolyORB_HI.Errors.Error_Kind;

  package room_the_access_control_thread_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.standard_room_controller_the_access_control_thread_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (30),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 10,
      Task_Stack_Size => 100000,
      Job => room_the_access_control_thread_Job);

end PolyORB_HI_Generated.Activity;
